# Generated by Django 4.1 on 2023-05-06 17:14

import databaseManagementLocal.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('UID', models.AutoField(primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=20)),
                ('Phone', models.CharField(max_length=20)),
                ('SecretKey', models.CharField(max_length=100)),
                ('Avatar', models.ImageField(blank=True, upload_to=databaseManagementLocal.models.User.user_directory_path)),
                ('License', models.ImageField(blank=True, upload_to=databaseManagementLocal.models.User.user_directory_path)),
                ('Type', models.IntegerField(choices=[(1, 'Customer'), (2, 'Seller'), (3, 'Deliverystaff'), (4, 'Admin')], default=1)),
                ('Member', models.IntegerField(choices=[(1, 'Cu'), (2, 'Ag'), (3, 'Au'), (4, 'Diamond')], default=1)),
                ('Address', models.CharField(blank=True, max_length=100)),
                ('MoneyDaily', models.IntegerField(default=0)),
                ('MoneyMonthly', models.IntegerField(default=0)),
                ('MoneySum', models.IntegerField(default=0)),
                ('Cart', models.JSONField(blank=True, null=True)),
                ('CustomerDaily', models.IntegerField(blank=True, default=0)),
                ('CustomerSum', models.IntegerField(blank=True, default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('OrderNumber', models.AutoField(primary_key=True, serialize=False)),
                ('Address', models.CharField(max_length=100)),
                ('Phone', models.CharField(max_length=30)),
                ('Notes', models.CharField(blank=True, max_length=500)),
                ('Payment', models.IntegerField(choices=[(1, 'Alipay'), (2, 'Wechat'), (3, 'Balance')])),
                ('PayStatus', models.BooleanField(default=False)),
                ('ShopUID', models.IntegerField()),
                ('DeliveryStaffUID', models.IntegerField(blank=True, null=True)),
                ('DeliveryState', models.IntegerField(choices=[(0, 'Nojiedan'), (1, 'Nodeliverystaff'), (2, 'Noqucan'), (3, 'Qucaning'), (4, 'Onroad'), (5, 'Done')], default=0)),
                ('Cart', models.JSONField()),
                ('MoneySum', models.FloatField(max_length=10)),
                ('UserUID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('FoodID', models.AutoField(primary_key=True, serialize=False)),
                ('FoodPhoto', models.ImageField(upload_to=databaseManagementLocal.models.Menu.user_directory_path)),
                ('Money', models.FloatField(max_length=10)),
                ('Discount', models.FloatField(max_length=10)),
                ('ShopID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
